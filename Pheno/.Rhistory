install.packages("golem")
devtools::install_github("AparicioJohan/MrBeanApp")
# asreml.license.activate()
devtools::install_github("AparicioJohan/MrBeanApp")
install.packages("caret", dependencies = c("Depends", "Suggests"))
load("~/Documents/Cesar/git/quality_2022/tidy2.RData")
summary(m3)$varcomp
summary(FA_1)$varcomp
# quality
library(data.table)
library(tidyverse)
library(ggpubr)
library(StageWise)
library(asreml)
library(asremlPlus)
session_info()
install.packages("asremlPlus")
library(asremlPlus)
plot(m3)
summary(m3)$varcomp
m1 <- asreml::asreml(fixed = resp ~ 1 + cov1 + cov2,
random = ~ + gen + block, residual = ~sar(row):sar(col),
data = data,
na.action = list(x = "include", y = "include"))
data <- qual6[[189]]
data <- data[order(data$row, data$col), ]
m1 <- asreml::asreml(fixed = resp ~ 1 + cov1 + cov2,
random = ~ + gen + block, residual = ~sar(row):sar(col),
data = data,
na.action = list(x = "include", y = "include"))
summary(m1)$varcomp
install.packages("stringi")
install.packages("asremlPlus")
library(asremlPlus)
current.asrt <- as.asrtests(m1, NULL, NULL)
current.asrt <- as.asrtests(FA_1, NULL, NULL)
current.asrt <- rmboundary(current.asrt)
# Test nugget term
current.asrt <- testranfix(current.asrt, "units", positive=TRUE)
current.asrt
current.asrt <- as.asrtests(m3, NULL, NULL)
current.asrt <- as.asrtests(m1, NULL, NULL)
current.asrt <- as.asrtests(Diag, NULL, NULL)
current.asrt <- rmboundary(current.asrt)
# Test nugget term
current.asrt <- testranfix(current.asrt, "units", positive=TRUE)
current.asrt
# quality
library(data.table)
library(tidyverse)
library(ggpubr)
library(StageWise)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("jendelman/StageWise", build_vignettes=FALSE)
library(StageWise)
library(asreml)
head(A2018_1)
# A2018_1 <- na.omit(A2018_1)
summary(A2018_1)
head(b1.3)
str(qual5)
qual6[[145]]
names(qual6)
head(qual6[[189]])
qual_AIC2[ , .SD[which.min(AIC)], by = trait]
View(qual7)
data <- qual6[[189]]
data <- data[order(data$row, data$col), ]
head(data)
m1 <- asreml::asreml(fixed = resp ~ 1 + cov1 + cov2,
random = ~ + gen + block, residual = ~sar(row):sar(col),
data = data,
na.action = list(x = "include", y = "include"))
m2 <- asreml::asreml(fixed = resp ~ 1 + gen + cov1 + cov2,
random = ~ + block, residual = ~ar1(row):id(col),
data = data,
na.action = list(x = "include", y = "include"))
m3 <- asreml::asreml(fixed = resp ~ 1 + gen + cov1 + cov2,
random = ~ + block, residual = ~ar1(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
m3 <- asreml::asreml(fixed = resp ~ 1 + gen + cov1 + cov2,
random = ~ + block, residual = ~ar1(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
m4 <- asreml::asreml(fixed = resp ~ 1 + block + cov1 + cov2,
random = ~ + gen, residual = ~ar1(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
plot(m4)
plot(m3)
plot(m4)
summary(m4)$varcomp
0.0007073916/0.0001172510
str(data)
levels(data$row)
levels(data$col)
View(data)
head(data)
levels(data$row)
library(tidyverse)
count(data, row)
count(data, col)
summary(m4)$varcomp
count(data, row)
summary(m4)$varcomp
S1 <- as.data.frame(summary(m4)$varcomp)
View(S1)
write.csv(S1, "~/Documents/Cesar/git/quality_2022/S1.csv")
head(data)
?vpredict
vpredict(m4, h2.resp ~ V1 /(V1 + V2))
vpredict(m4, h2.resp ~ V1 /(V1 + V3))
vpredict(m4, h2.resp ~ V1 /(V1 + V3 + V4))
m4$vparameters
summary(m4)$varcomp
vpredict(m4, h2.resp ~ V1 /(V1 + V3 + V4))
summary(m2, coef = T)$coef.fixed
summary(m4, coef = T)$coef.fixed
wald.asreml(m4, ssType = "conditional", denDF = "numeric")
summary(m2, coef = T)$coef.fixed
wald.asreml(m2, ssType = "conditional", denDF = "numeric")
0.05 > 0.023
summary(m2, coef = T)$coef.fixed
S2 <- as.data.frame(summary(m2, coef = T)$coef.fixed)
View(S2)
S2 <- as.data.frame(summary(m2, coef = F)$coef.fixed)
S2 <- as.data.frame(summary(m2)$coef.fixed)
summary(m2)$coef.fixed
S2 <- as.data.frame(summary(m2, coef = T)$coef.fixed)
View(S2)
plot(m3)
plot(m4)
library(asremlPlus)
m5 <- as.asrtests(m4, NULL, NULL)
m5 <- rmboundary(m4)
m5 <- rmboundary.asrtests(m4)
rm(m5)
m5 <- as.asrtests(m4, NULL, NULL)
m5 <- rmboundary(m4)
m5 <- rmboundary.asrtests(m4)
rm(m5)
m5 <- rmboundary.asrtests(m4)
?as.asrtests
m4 <- asreml::asreml(fixed = resp ~ 1 + block + cov1 + cov2,
random = ~ + gen, residual = ~ar1(row):ar1(col),
data = data,
na.action = list(x = "include", y = "include"))
vpredict(m4, h2.resp ~ V1 /(V1 + V3 + V4))
m4$vparameters
vpredict(m4, h2.resp ~ V1 /(V1 + V3 + V4))
?wald.asreml
wald.asreml(m2, ssType = "conditional", denDF = "numeric")
wald.asreml(m2, ssType = "incremental", denDF = "none") # default
wald.asreml(m4, ssType = "incremental", denDF = "none") # default
wald.asreml(m4, ssType = "incremental", denDF = "none") # default
wald.asreml(m2, ssType = "conditional", denDF = "numeric")
wald.asreml(m2, ssType = "incremental", denDF = "none") # default
64*16
A1 <- read.csv("~/Documents/Cesar/git/Norberg_2020/original_data/DM_Yi_WA_2018_1.csv")
head(A1)
colnames(A1)
A2 <- A1[,c(9:17)]
head(A2)
A2 %>% dplyr::filter(Treatment %in% c(201, 202))
A3 <- A2 %>% dplyr::filter(!Treatment %in% c(201, 202))
View(A3)
summary(A3)
A3 <- A3[,-3]
summary(A3)
A3 <- A3 %>% column_to_rownames(var = "Treatment")
summary(A3)
P3 <- cor(A3, use = "complete.obs")
ggcorrplot(P3[,ncol(P3):1], hc.order = F, type = "full", lab = T, lab_col = "grey3", lab_size = 2, show.diag = T) + scale_fill_gradient(low = "white", high = "orangered") + theme_ipsum(base_family = "Arial", base_size = 8) + theme(axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.2), axis.title.x=element_blank(), axis.title.y = element_blank())
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(P3[,ncol(P3):1], hc.order = F, type = "full", lab = T, lab_col = "grey3", lab_size = 2, show.diag = T) + scale_fill_gradient(low = "white", high = "orangered") + theme_ipsum(base_family = "Arial", base_size = 8) + theme(axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.2), axis.title.x=element_blank(), axis.title.y = element_blank())
ggcorrplot(P3[,ncol(P3):1], hc.order = F, type = "full", lab = T, lab_col = "grey3", lab_size = 2, show.diag = T) + scale_fill_gradient(low = "white", high = "orangered") + theme_classic(base_family = "Arial", base_size = 8) + theme(axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.2), axis.title.x=element_blank(), axis.title.y = element_blank())
head(A1)
plot(A3$ClipWet, A3$ClipDryCorrected)
colnames(A3)
A3$moist <- ((A3$ClipWet - A3$ClipDryCorrected)/A3$ClipDryCorrected)*100
colnames(A3)
P3 <- cor(A3, use = "complete.obs")
ggcorrplot(P3[,ncol(P3):1], hc.order = F, type = "full", lab = T, lab_col = "grey3", lab_size = 2, show.diag = T) + scale_fill_gradient(low = "white", high = "orangered") + theme_classic(base_family = "Arial", base_size = 8) + theme(axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.2), axis.title.x=element_blank(), axis.title.y = element_blank())
A3$DM <- 100 - A3$moist
P3 <- cor(A3, use = "complete.obs")
ggcorrplot(P3[,ncol(P3):1], hc.order = F, type = "full", lab = T, lab_col = "grey3", lab_size = 2, show.diag = T) + scale_fill_gradient(low = "white", high = "orangered") + theme_classic(base_family = "Arial", base_size = 8) + theme(axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.2), axis.title.x=element_blank(), axis.title.y = element_blank())
load("/home/hawkins/Documents/Cesar/blup_data/Roza2021/DArT_report/DArT1.RData")
colnames(a7)
head(b4)
colnames(b4)
str(b4)
View(b4)
is.numeric(b4)
write.csv(b4, "~/Documents/Cesar/blup_data/Roza2021/DArT_report/Cage20_DArT.csv", quote = F, row.names = T)
5*32
11*200
rm(list = ls())
library(metan)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(metan)
library(ggplot2)
library(tidyverse)
library(ggrepel)
load("/home/hawkins/Documents/Cesar/git/quality_2022/Pheno/Dunn.RData")
a6 <- ST1[[6]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
# a6 <- a6 %>% separate(2, c("loc", "year"), sep = "_", remove = F, convert = FALSE, extra = "merge")
a6 <- as.tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b <- superiority(a6, env, gen, predicted.value)
out <- ge_acv(a6, env, gen, predicted.value)
View(out)
View(out[["predicted.value"]])
?ge_acv
b <- superiority(a6, env, gen, predicted.value)
View(b)
View(b[["predicted.value"]][["index"]])
View(a6)
b1 <- b[["predicted.value"]][["index"]][,c(1,2)]
View(b1)
b2 <- out[["predicted.value"]][,c(1,2)]
View(b2)
View(b2)
View(B_plot)
View(b2)
View(b1)
b3 <- inner_join(b1, b2, by = "GEN")
View(b3)
ggplot(b3, aes(x=Y, y=ACV)) +geom_point() + geom_text(label=rownames(GEN))
ggplot(b3, aes(x=Y, y=ACV)) +geom_point() + geom_text(label=rownames(b3$GEN))
ggplot(b3, aes(x=Y, y=ACV)) +geom_point()
ggplot(b3, aes(x=Y, y=ACV)) +geom_point() + geom_text(label=b3$GEN)
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point() + geom_text_repel()
View(b)
View(b[["predicted.value"]][["index"]])
ge_cluster(a6, env, gen, predicted.value, nclust = 4)
gge_eff <- ge_cluster(a6, env, gen, predicted.value, nclust = 4)
View(gge_eff)
plot(gge_eff)
head(a6)
head(ST3.1)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 4)
plot(gge_eff)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5)
plot(gge_eff)
plot(gge_eff)
plot(d1, nclust = 4)
plot(gge_eff, nclust = 4)
plot(gge_eff, nclust = 5)
plot(gge_eff, nclust = 4)
?ge_cluster
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'euclidean', clustmethod = 'average')
plot(gge_eff)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'average')
plot(gge_eff)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'ward.D2')
plot(gge_eff)
plot(gge_eff, nclust = 4)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'complete')
plot(gge_eff)
plot(gge_eff, nclust = 4)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'centroid')
plot(gge_eff)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'mcquitty')
plot(gge_eff)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'single')
plot(gge_eff)
gge_eff <- ge_cluster(ST3.1, trait, gen, predicted.value, nclust = 5, distmethod = 'manhattan', clustmethod = 'ward.D2')
plot(gge_eff)
plot(gge_eff, nclust = 4)
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point() + geom_text_repel()
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel()
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_minimal()
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_minimal() + labs(x = "CP mean", y = "Coeficient of variation")
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_minimal() + labs(x = "CP mean", y = "CV")
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_bw() + labs(x = "CP mean", y = "CV")
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_bw(base_family = "Arial", base_size = 12) + labs(x = "CP mean", y = "CV")
names(SC1)
names(ST1)
a6 <- ST1[[12]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
a6 <- as_tibble(a6)
head(a6)
b <- superiority(a6, env, gen, predicted.value)
out <- ge_acv(a6, env, gen, predicted.value)
b1 <- b[["predicted.value"]][["index"]][,c(1,2)]
b2 <- out[["predicted.value"]][,c(1,2)]
b3 <- inner_join(b1, b2, by = "GEN")
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_bw(base_family = "Arial", base_size = 12) + labs(x = "CP mean", y = "CV")
ggplot(b3, aes(x=Y, y=ACV, label = GEN)) + geom_point(alpha = 0.6) + geom_text_repel() + theme_bw(base_family = "Arial", base_size = 12) + labs(x = "Mg mean", y = "CV")
names(ST1)
a6 <- ST1[[1]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b01 <- superiority(a6, env, gen, predicted.value)
names(ST1)
a6 <- ST1[[3]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b03 <- superiority(a6, env, gen, predicted.value)
a6 <- ST1[11]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
# b <- ge_plot(a6, env, gen, predicted.value)
# b <- ge_winners(a6, env, gen, resp = predicted.value, type = "ranks")
# b <- b %>% rownames_to_column(var = "gen") %>% spread(key = ENV, value = predicted.value)
# b <- make_mat(a6, env, gen, predicted.value)
b <- ge_effects(a6, env, gen, predicted.value, type = "ge") # important
b13 <- superiority(a6, env, gen, predicted.value)
a6 <- ST1[11]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
head(a6)
a6 <- ST1[11]
head(a6)
a6 <- ST1[[11]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
# b <- ge_plot(a6, env, gen, predicted.value)
# b <- ge_winners(a6, env, gen, resp = predicted.value, type = "ranks")
# b <- b %>% rownames_to_column(var = "gen") %>% spread(key = ENV, value = predicted.value)
# b <- make_mat(a6, env, gen, predicted.value)
b <- ge_effects(a6, env, gen, predicted.value, type = "ge") # important
b13 <- superiority(a6, env, gen, predicted.value)
View(b13)
View(b13[["predicted.value"]][["index"]])
names(ST1)
View(b13[["predicted.value"]][["environments"]])
View(b01)
View(b03)
View(b03[["predicted.value"]][["environments"]])
View(b03[["predicted.value"]][["environments"]])
colnames(b13[["predicted.value"]][["index"]][["Y"]])
colnames(b13[["predicted.value"]][["index"])
colnames(b13[["predicted.value"]][["index"]])
colnames(b13[["predicted.value"]]$environments)
colnames(b13[["predicted.value"]]$environments)[2:4]
paste0(colnames(b13[["predicted.value"]]$environments)[2:4], "Lignin")
paste0(colnames(b13[["predicted.value"]]$environments)[2:4], "_Lignin")
colnames(b13[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b13[["predicted.value"]]$environments)[2:4], "_Lignin")
View(b13[["predicted.value"]][["environments"]])
b11 <- superiority(a6, env, gen, predicted.value)
a6 <- ST1[[11]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
# b <- ge_plot(a6, env, gen, predicted.value)
# b <- ge_winners(a6, env, gen, resp = predicted.value, type = "ranks")
# b <- b %>% rownames_to_column(var = "gen") %>% spread(key = ENV, value = predicted.value)
# b <- make_mat(a6, env, gen, predicted.value)
b <- ge_effects(a6, env, gen, predicted.value, type = "ge") # important
?ge_effects
b11 <- superiority(a6, env, gen, predicted.value)
colnames(b01[["predicted.value"]]$environments)[2:4]
colnames(b01[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b01[["predicted.value"]]$environments)[2:4], "_ADF")
colnames(b03[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b13[["predicted.value"]]$environments)[2:4], "_aNDF")
colnames(b11[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b11[["predicted.value"]]$environments)[2:4], "_Lignin")
colnames(b01[["predicted.value"]]$environments)[2:4]
SEnv1 <- inner_join(b01[["predicted.value"]]$environments, b03[["predicted.value"]]$environments, by = "ENV") %>% inner_join(., b11[["predicted.value"]]$environments, by = "ENV")
View(SEnv1)
View(b01[["predicted.value"]][["index"]])
colnames(b01[["predicted.value"]]$index)
colnames(b01[["predicted.value"]]$index)[2:8]
names(ST1)
colnames(b01[["predicted.value"]]$index)[2:8] <- paste0(colnames(b01[["predicted.value"]]$index)[2:8], "_ADF")
colnames(b03[["predicted.value"]]$index)[2:8] <- paste0(colnames(b03[["predicted.value"]]$index)[2:8], "_ADF")
colnames(b11[["predicted.value"]]$index)[2:8] <- paste0(colnames(b11[["predicted.value"]]$index)[2:8], "_ADF")
colnames(b11[["predicted.value"]]$index)[2:8]
b01 <- superiority(a6, env, gen, predicted.value)
b03 <- superiority(a6, env, gen, predicted.value)
b11 <- superiority(a6, env, gen, predicted.value)
colnames(b01[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b01[["predicted.value"]]$environments)[2:4], "_ADF")
colnames(b03[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b13[["predicted.value"]]$environments)[2:4], "_aNDF")
colnames(b11[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b11[["predicted.value"]]$environments)[2:4], "_Lignin")
colnames(b01[["predicted.value"]]$index)[2:8] <- paste0(colnames(b01[["predicted.value"]]$index)[2:8], "_ADF")
colnames(b03[["predicted.value"]]$index)[2:8] <- paste0(colnames(b03[["predicted.value"]]$index)[2:8], "_aNDF")
colnames(b11[["predicted.value"]]$index)[2:8] <- paste0(colnames(b11[["predicted.value"]]$index)[2:8], "_Lignin")
colnames(b11[["predicted.value"]]$index)
SInx1 <- inner_join(b01[["predicted.value"]]$index, b03[["predicted.value"]]$index, by = "ENV") %>% inner_join(., b11[["predicted.value"]]$index, by = "ENV")
SInx1 <- inner_join(b01[["predicted.value"]]$index, b03[["predicted.value"]]$index, by = "GEN") %>% inner_join(., b11[["predicted.value"]]$index, by = "GEN")
View(SInx1)
write.csv(SInx1, "~/Documents/Cesar/git/quality_2022/Pheno/SInx1/csv", quote = F, row.names = F)
write.csv(SInx1, "~/Documents/Cesar/git/quality_2022/Pheno/SInx1.csv", quote = F, row.names = F)
write.csv(SEnv1, "~/Documents/Cesar/git/quality_2022/Pheno/SEnv1.csv", quote = F, row.names = F)
a6 <- ST1[[1]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b01 <- superiority(a6, env, gen, predicted.value)
a6 <- ST1[[3]]
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b03 <- superiority(a6, env, gen, predicted.value)
a6 <- ST1[[11]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b11 <- superiority(a6, env, gen, predicted.value)
colnames(b01[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b01[["predicted.value"]]$environments)[2:4], "_ADF")
colnames(b03[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b13[["predicted.value"]]$environments)[2:4], "_aNDF")
colnames(b11[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b11[["predicted.value"]]$environments)[2:4], "_Lignin")
SEnv1 <- inner_join(b01[["predicted.value"]]$environments, b03[["predicted.value"]]$environments, by = "ENV") %>% inner_join(., b11[["predicted.value"]]$environments, by = "ENV")
colnames(b01[["predicted.value"]]$index)[2:8] <- paste0(colnames(b01[["predicted.value"]]$index)[2:8], "_ADF")
colnames(b03[["predicted.value"]]$index)[2:8] <- paste0(colnames(b03[["predicted.value"]]$index)[2:8], "_aNDF")
colnames(b11[["predicted.value"]]$index)[2:8] <- paste0(colnames(b11[["predicted.value"]]$index)[2:8], "_Lignin")
SInx1 <- inner_join(b01[["predicted.value"]]$index, b03[["predicted.value"]]$index, by = "GEN") %>% inner_join(., b11[["predicted.value"]]$index, by = "GEN")
write.csv(SInx1, "~/Documents/Cesar/git/quality_2022/Pheno/SInx1.csv", quote = F, row.names = F)
write.csv(SEnv1, "~/Documents/Cesar/git/quality_2022/Pheno/SEnv1.csv", quote = F, row.names = F)
colnames(SInx1)
colnames(SEnv1)
a6 <- ST1[[3]]
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b03 <- superiority(a6, env, gen, predicted.value)
colnames(b03[["predicted.value"]]$environments)[2:4] <- paste0(colnames(b03[["predicted.value"]]$environments)[2:4], "_aNDF")
colnames(b03[["predicted.value"]]$index)[2:8] <- paste0(colnames(b03[["predicted.value"]]$index)[2:8], "_aNDF")
colnames(SInx1)
colnames(SEnv1)
SEnv1 <- inner_join(b01[["predicted.value"]]$environments, b03[["predicted.value"]]$environments, by = "ENV") %>% inner_join(., b11[["predicted.value"]]$environments, by = "ENV")
colnames(SInx1)
colnames(SEnv1)
SEnv2 <- SEnv1[,c(1,2,5,8,1,3,6,9,1,4,7,10)]
View(SEnv2)
write.csv(SEnv2, "~/Documents/Cesar/git/quality_2022/Pheno/SEnv1.csv", quote = F, row.names = F)
colnames(SInx1)
SInx2 <- SInx1[,c(1,2,9,16,1,3,4,10,11,17,18,1,5,6,12,13,19,20,1,7,8,14,15,21,22)]
View(SInx2)
write.csv(SInx2, "~/Documents/Cesar/git/quality_2022/Pheno/SInx1.csv", quote = F, row.names = F)
write.csv(SEnv2, "~/Documents/Cesar/git/quality_2022/Pheno/SEnv1.csv", quote = F, row.names = F)
names(ST1)
a6 <- ST1[[6]]
head(a6)
class(a6)
a6 <- as.data.frame(a6)
a6 <- as_tibble(a6)
a6$env <- as.factor(a6$env)
a6$gen <- as.factor(a6$gen)
b01 <- superiority(a6, env, gen, predicted.value)
head(a6)
str(a6)
two.way <- aov(predicted.value ~ gen + env, data = a6)
summary(two.way)
library(modelsummary)
?modelsummary
setwd("~/Documents/Cesar/git/quality_2022/Pheno/")
modelsummary(two.way, exponentiate = TRUE, output = "AOV.docx")
modelsummary(two.way, output = "AOV.docx")
modelsummary(two.way)
get_estimates(two.way)
get_estimates(two.way, output = "AOV.docx")
setwd("~/Documents/Cesar/git/quality_2022/Pheno/")
get_estimates(two.way, output = "AOV.docx")
AOV1 <- get_estimates(two.way, output = "AOV.docx")
View(AOV1)
summary(two.way)
ST3.2 <- ST3.1 %>% dplyr::filter(trait %in% c("ADF","aNDF","Lignin")) %>% spread(key = trait, value = 3) %>% remove_rownames() %>% column_to_rownames("gen")
View(ST3.2)
BLUP2.1 <- cor(ST3.2, use = "complete")
datasummary_correlation(ST3.2,
output = "ST3.2.docx")
rm(list = ls())
rm(list = ls())
session_info()
library(tidyverse)
library(ggcorrplot)
library(patchwork)
setwd("~/Documents/Cesar/git/quality_2022/Pheno/")
